{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM+lB8ILoA2KlHiYCcGUj8J",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/databat2020/Talent-Acquisition-Data-Analysis/blob/main/code%20block%20for%20analysis%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "hWW7lu_lBVCo",
        "outputId": "af3d12fc-8d06-4125-c076-336478490e92"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 80 entries, 0 to 79\n",
            "Data columns (total 10 columns):\n",
            " #   Column                 Non-Null Count  Dtype         \n",
            "---  ------                 --------------  -----         \n",
            " 0   Candidate ID           80 non-null     object        \n",
            " 1   Job Position           80 non-null     object        \n",
            " 2   Date of Application    80 non-null     datetime64[ns]\n",
            " 3   Date of Interview      80 non-null     datetime64[ns]\n",
            " 4   Date of Offer          80 non-null     datetime64[ns]\n",
            " 5   Date of Acceptance     80 non-null     datetime64[ns]\n",
            " 6   Source of Hire         80 non-null     object        \n",
            " 7   Cost per Hire          80 non-null     float64       \n",
            " 8   Performance Score      80 non-null     int64         \n",
            " 9   Retained After 1 Year  80 non-null     object        \n",
            "dtypes: datetime64[ns](4), float64(1), int64(1), object(4)\n",
            "memory usage: 6.4+ KB\n",
            "None\n",
            "       Date of Application    Date of Interview        Date of Offer  \\\n",
            "count                   80                   80                   80   \n",
            "mean   2024-10-30 20:42:00  2024-11-04 11:24:00  2024-11-11 02:06:00   \n",
            "min    2024-10-01 00:00:00  2024-10-04 00:00:00  2024-10-12 00:00:00   \n",
            "25%    2024-10-14 00:00:00  2024-10-18 00:00:00  2024-10-23 18:00:00   \n",
            "50%    2024-10-30 00:00:00  2024-11-04 00:00:00  2024-11-10 00:00:00   \n",
            "75%    2024-11-14 00:00:00  2024-11-19 06:00:00  2024-11-26 00:00:00   \n",
            "max    2024-12-01 00:00:00  2024-12-06 00:00:00  2024-12-14 00:00:00   \n",
            "std                    NaN                  NaN                  NaN   \n",
            "\n",
            "        Date of Acceptance  Cost per Hire  Performance Score  \n",
            "count                   80      80.000000          80.000000  \n",
            "mean   2024-11-13 22:48:00    4000.757375          82.812500  \n",
            "min    2024-10-15 00:00:00    3030.610000          71.000000  \n",
            "25%    2024-10-26 18:00:00    3383.737500          77.750000  \n",
            "50%    2024-11-13 00:00:00    4017.735000          82.500000  \n",
            "75%    2024-11-29 06:00:00    4604.882500          88.000000  \n",
            "max    2024-12-18 00:00:00    4963.680000          94.000000  \n",
            "std                    NaN     621.267925           6.997457  \n",
            "Candidate ID             0\n",
            "Job Position             0\n",
            "Date of Application      0\n",
            "Date of Interview        0\n",
            "Date of Offer            0\n",
            "Date of Acceptance       0\n",
            "Source of Hire           0\n",
            "Cost per Hire            0\n",
            "Performance Score        0\n",
            "Retained After 1 Year    0\n",
            "dtype: int64\n",
            "Average Cost per Hire: 4000.7573749999997\n",
            "Average Cost per Hire by Job Position:\n",
            "Job Position\n",
            "Data Analyst         4056.561176\n",
            "HR Specialist        4058.183750\n",
            "Marketing Manager    4060.837143\n",
            "Software Engineer    3801.392222\n",
            "Name: Cost per Hire, dtype: float64\n",
            "Average Performance Score: 82.8125\n",
            "Average Performance Score by Job Position:\n",
            "Job Position\n",
            "Data Analyst         80.647059\n",
            "HR Specialist        81.791667\n",
            "Marketing Manager    84.000000\n",
            "Software Engineer    84.833333\n",
            "Name: Performance Score, dtype: float64\n",
            "Retention Rate:\n",
            "Retained After 1 Year\n",
            "Yes    56.25\n",
            "No     43.75\n",
            "Name: proportion, dtype: float64\n",
            "Retention Rate by Job Position:\n",
            "Job Position       Retained After 1 Year\n",
            "Data Analyst       Yes                      64.705882\n",
            "                   No                       35.294118\n",
            "HR Specialist      Yes                      66.666667\n",
            "                   No                       33.333333\n",
            "Marketing Manager  No                       52.380952\n",
            "                   Yes                      47.619048\n",
            "Software Engineer  No                       55.555556\n",
            "                   Yes                      44.444444\n",
            "Name: proportion, dtype: float64\n",
            "Time Analysis Summary:\n",
            "       Time to Interview  Time to Offer  Time to Acceptance\n",
            "count          80.000000      80.000000           80.000000\n",
            "mean            4.612500       6.612500            2.862500\n",
            "std             1.084923       1.354727            0.822835\n",
            "min             3.000000       5.000000            2.000000\n",
            "25%             4.000000       5.000000            2.000000\n",
            "50%             5.000000       7.000000            3.000000\n",
            "75%             5.250000       8.000000            4.000000\n",
            "max             6.000000       9.000000            4.000000\n",
            "Source of Hire Analysis:\n",
            "                Cost per Hire  Performance Score  Retained After 1 Year\n",
            "Source of Hire                                                         \n",
            "Agency            3899.897500          81.700000              55.000000\n",
            "Job Board         3979.976364          83.409091              59.090909\n",
            "Referral          4030.121250          84.187500              56.250000\n",
            "Social Media      4091.873636          82.227273              54.545455\n",
            "Job Position Analysis:\n",
            "                   Cost per Hire  Performance Score  Retained After 1 Year\n",
            "Job Position                                                              \n",
            "Data Analyst         4056.561176          80.647059              64.705882\n",
            "HR Specialist        4058.183750          81.791667              66.666667\n",
            "Marketing Manager    4060.837143          84.000000              47.619048\n",
            "Software Engineer    3801.392222          84.833333              44.444444\n",
            "Requirement already satisfied: dash in /usr/local/lib/python3.10/dist-packages (2.18.2)\n",
            "Requirement already satisfied: Flask<3.1,>=1.0.4 in /usr/local/lib/python3.10/dist-packages (from dash) (3.0.3)\n",
            "Requirement already satisfied: Werkzeug<3.1 in /usr/local/lib/python3.10/dist-packages (from dash) (3.0.6)\n",
            "Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (5.24.1)\n",
            "Requirement already satisfied: dash-html-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (2.0.0)\n",
            "Requirement already satisfied: dash-core-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (2.0.0)\n",
            "Requirement already satisfied: dash-table==5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (5.0.0)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.10/dist-packages (from dash) (8.5.0)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from dash) (4.12.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from dash) (2.32.3)\n",
            "Requirement already satisfied: retrying in /usr/local/lib/python3.10/dist-packages (from dash) (1.3.4)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (from dash) (1.6.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from dash) (75.1.0)\n",
            "Requirement already satisfied: Jinja2>=3.1.2 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (3.1.5)\n",
            "Requirement already satisfied: itsdangerous>=2.1.2 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (2.2.0)\n",
            "Requirement already satisfied: click>=8.1.3 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (8.1.8)\n",
            "Requirement already satisfied: blinker>=1.6.2 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (1.9.0)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->dash) (9.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->dash) (24.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from Werkzeug<3.1->dash) (3.0.2)\n",
            "Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata->dash) (3.21.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (2024.12.14)\n",
            "Requirement already satisfied: six>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from retrying->dash) (1.17.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (5.24.1)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly) (9.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly) (24.2)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "(async (port, path, width, height, cache, element) => {\n",
              "    if (!google.colab.kernel.accessAllowed && !cache) {\n",
              "      return;\n",
              "    }\n",
              "    element.appendChild(document.createTextNode(''));\n",
              "    const url = await google.colab.kernel.proxyPort(port, {cache});\n",
              "    const iframe = document.createElement('iframe');\n",
              "    iframe.src = new URL(path, url).toString();\n",
              "    iframe.height = height;\n",
              "    iframe.width = width;\n",
              "    iframe.style.border = 0;\n",
              "    iframe.allow = [\n",
              "        'accelerometer',\n",
              "        'autoplay',\n",
              "        'camera',\n",
              "        'clipboard-read',\n",
              "        'clipboard-write',\n",
              "        'gyroscope',\n",
              "        'magnetometer',\n",
              "        'microphone',\n",
              "        'serial',\n",
              "        'usb',\n",
              "        'xr-spatial-tracking',\n",
              "    ].join('; ');\n",
              "    element.appendChild(iframe);\n",
              "  })(8050, \"/\", \"100%\", 650, false, window.element)"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "df = pd.read_excel(\"/content/talent_acquisition_data.xlsx\")\n",
        "df.head()\n",
        "\n",
        "print(df.info())\n",
        "\n",
        "print(df.describe())\n",
        "\n",
        "print(df.isnull().sum())\n",
        "average_cost_per_hire = df[\"Cost per Hire\"].mean()\n",
        "print(f\"Average Cost per Hire: {average_cost_per_hire}\")\n",
        "\n",
        "# Group by job position and calculate the average cost per hire\n",
        "cost_by_job_position = df.groupby(\"Job Position\")[\"Cost per Hire\"].mean()\n",
        "print(\"Average Cost per Hire by Job Position:\")\n",
        "print(cost_by_job_position)\n",
        "# Calculate the average performance score\n",
        "average_performance_score = df[\"Performance Score\"].mean()\n",
        "print(f\"Average Performance Score: {average_performance_score}\")\n",
        "\n",
        "# Group by job position and calculate the average performance score\n",
        "performance_by_job_position = df.groupby(\"Job Position\")[\"Performance Score\"].mean()\n",
        "print(\"Average Performance Score by Job Position:\")\n",
        "print(performance_by_job_position)\n",
        "# Calculate the retention rate\n",
        "retention_rate = df[\"Retained After 1 Year\"].value_counts(normalize=True) * 100\n",
        "print(\"Retention Rate:\")\n",
        "print(retention_rate)\n",
        "\n",
        "# Group by job position and calculate the retention rate\n",
        "retention_by_job_position = df.groupby(\"Job Position\")[\"Retained After 1 Year\"].value_counts(normalize=True) * 100\n",
        "print(\"Retention Rate by Job Position:\")\n",
        "print(retention_by_job_position)\n",
        "# Convert date columns to datetime\n",
        "date_columns = [\"Date of Application\", \"Date of Interview\", \"Date of Offer\", \"Date of Acceptance\"]\n",
        "for col in date_columns:\n",
        "    df[col] = pd.to_datetime(df[col])\n",
        "\n",
        "# Calculate the time taken between different stages\n",
        "df[\"Time to Interview\"] = (df[\"Date of Interview\"] - df[\"Date of Application\"]).dt.days\n",
        "df[\"Time to Offer\"] = (df[\"Date of Offer\"] - df[\"Date of Interview\"]).dt.days\n",
        "df[\"Time to Acceptance\"] = (df[\"Date of Acceptance\"] - df[\"Date of Offer\"]).dt.days\n",
        "\n",
        "# Get summary statistics for the time taken\n",
        "time_summary = df[[\"Time to Interview\", \"Time to Offer\", \"Time to Acceptance\"]].describe()\n",
        "print(\"Time Analysis Summary:\")\n",
        "print(time_summary)\n",
        "# Group by source of hire and calculate average cost, performance, and retention rate\n",
        "source_analysis = df.groupby(\"Source of Hire\").agg({\n",
        "    \"Cost per Hire\": \"mean\",\n",
        "    \"Performance Score\": \"mean\",\n",
        "    \"Retained After 1 Year\": lambda x: (x == \"Yes\").mean() * 100\n",
        "})\n",
        "print(\"Source of Hire Analysis:\")\n",
        "print(source_analysis)\n",
        "# Group by job position and calculate average cost, performance, and retention rate\n",
        "job_position_analysis = df.groupby(\"Job Position\").agg({\n",
        "    \"Cost per Hire\": \"mean\",\n",
        "    \"Performance Score\": \"mean\",\n",
        "    \"Retained After 1 Year\": lambda x: (x == \"Yes\").mean() * 100\n",
        "})\n",
        "print(\"Job Position Analysis:\")\n",
        "print(job_position_analysis)\n",
        "#plotly visulation\n",
        "# Install necessary libraries\n",
        "!pip install dash\n",
        "!pip install pandas\n",
        "!pip install plotly\n",
        "\n",
        "import pandas as pd\n",
        "import dash\n",
        "from dash import html, dcc, Input, Output\n",
        "import plotly.express as px\n",
        "\n",
        "# Load the data into a pandas DataFrame\n",
        "# Assuming the data is stored in an Excel file\n",
        "df = pd.read_excel(\"/content/talent_acquisition_data.xlsx\")\n",
        "\n",
        "# Convert date columns to datetime\n",
        "date_columns = [\"Date of Application\", \"Date of Interview\", \"Date of Offer\", \"Date of Acceptance\"]\n",
        "for col in date_columns:\n",
        "    df[col] = pd.to_datetime(df[col])\n",
        "\n",
        "# Calculate time taken for each stage\n",
        "df[\"Time to Interview\"] = (df[\"Date of Interview\"] - df[\"Date of Application\"]).dt.days\n",
        "df[\"Time to Offer\"] = (df[\"Date of Offer\"] - df[\"Date of Interview\"]).dt.days\n",
        "df[\"Time to Acceptance\"] = (df[\"Date of Acceptance\"] - df[\"Date of Offer\"]).dt.days\n",
        "\n",
        "# Create the Dash app\n",
        "app = dash.Dash(__name__)\n",
        "\n",
        "# Define layout\n",
        "app.layout = html.Div([\n",
        "    html.H1(\"Talent Acquisition Data Analysis Dashboard\", style={'textAlign': 'center'}),\n",
        "\n",
        "    # Dropdown for selecting analysis type\n",
        "    html.Label(\"Select Analysis Type:\"),\n",
        "    dcc.Dropdown(\n",
        "        id='analysis-type-dropdown',\n",
        "        options=[\n",
        "            {'label': 'Cost per Hire by Job Position', 'value': 'cost_by_job'},\n",
        "            {'label': 'Performance Score by Job Position', 'value': 'performance_by_job'},\n",
        "            {'label': 'Retention Rate by Job Position', 'value': 'retention_by_job'},\n",
        "            {'label': 'Time to Hire Analysis', 'value': 'time_to_hire'},\n",
        "            {'label': 'Source of Hire Analysis', 'value': 'source_analysis'}\n",
        "        ],\n",
        "        value='cost_by_job'  # Default value\n",
        "    ),\n",
        "\n",
        "    # Graph to display the analysis\n",
        "    dcc.Graph(id='analysis-graph')\n",
        "])\n",
        "\n",
        "# Define callback to update graph based on dropdown selection\n",
        "@app.callback(\n",
        "    Output('analysis-graph', 'figure'),\n",
        "    Input('analysis-type-dropdown', 'value')\n",
        ")\n",
        "def update_graph(selected_analysis):\n",
        "    if selected_analysis == 'cost_by_job':\n",
        "        # Average Cost per Hire by Job Position\n",
        "        cost_by_job = df.groupby(\"Job Position\")[\"Cost per Hire\"].mean().reset_index()\n",
        "        fig = px.bar(\n",
        "            cost_by_job,\n",
        "            x=\"Job Position\",\n",
        "            y=\"Cost per Hire\",\n",
        "            title=\"Average Cost per Hire by Job Position\",\n",
        "            labels={\"Cost per Hire\": \"Average Cost\", \"Job Position\": \"Job Position\"}\n",
        "        )\n",
        "\n",
        "    elif selected_analysis == 'performance_by_job':\n",
        "        # Average Performance Score by Job Position\n",
        "        performance_by_job = df.groupby(\"Job Position\")[\"Performance Score\"].mean().reset_index()\n",
        "        fig = px.bar(\n",
        "            performance_by_job,\n",
        "            x=\"Job Position\",\n",
        "            y=\"Performance Score\",\n",
        "            title=\"Average Performance Score by Job Position\",\n",
        "            labels={\"Performance Score\": \"Average Performance Score\", \"Job Position\": \"Job Position\"}\n",
        "        )\n",
        "\n",
        "    elif selected_analysis == 'retention_by_job':\n",
        "        # Retention Rate by Job Position\n",
        "        retention_by_job = df.groupby(\"Job Position\")[\"Retained After 1 Year\"].apply(lambda x: (x == \"Yes\").mean() * 100).reset_index()\n",
        "        fig = px.bar(\n",
        "            retention_by_job,\n",
        "            x=\"Job Position\",\n",
        "            y=\"Retained After 1 Year\",\n",
        "            title=\"Retention Rate by Job Position\",\n",
        "            labels={\"Retained After 1 Year\": \"Retention Rate (%)\", \"Job Position\": \"Job Position\"}\n",
        "        )\n",
        "\n",
        "    elif selected_analysis == 'time_to_hire':\n",
        "        # Time to Hire Analysis\n",
        "        time_summary = df[[\"Time to Interview\", \"Time to Offer\", \"Time to Acceptance\"]].mean().reset_index()\n",
        "        time_summary.columns = [\"Stage\", \"Average Days\"]\n",
        "        fig = px.bar(\n",
        "            time_summary,\n",
        "            x=\"Stage\",\n",
        "            y=\"Average Days\",\n",
        "            title=\"Average Time to Hire (in Days)\",\n",
        "            labels={\"Average Days\": \"Average Time (Days)\", \"Stage\": \"Hiring Stage\"}\n",
        "        )\n",
        "\n",
        "    elif selected_analysis == 'source_analysis':\n",
        "        # Source of Hire Analysis\n",
        "        source_analysis = df.groupby(\"Source of Hire\").agg({\n",
        "            \"Cost per Hire\": \"mean\",\n",
        "            \"Performance Score\": \"mean\",\n",
        "            \"Retained After 1 Year\": lambda x: (x == \"Yes\").mean() * 100\n",
        "        }).reset_index()\n",
        "        fig = px.bar(\n",
        "            source_analysis,\n",
        "            x=\"Source of Hire\",\n",
        "            y=[\"Cost per Hire\", \"Performance Score\", \"Retained After 1 Year\"],\n",
        "            title=\"Source of Hire Analysis\",\n",
        "            labels={\"value\": \"Metric Value\", \"variable\": \"Metric\"},\n",
        "            barmode=\"group\"\n",
        "        )\n",
        "\n",
        "    return fig\n",
        "\n",
        "# Run the app\n",
        "if __name__ == '__main__':\n",
        "    app.run_server(debug=True, mode=\"external\")"
      ]
    }
  ]
}